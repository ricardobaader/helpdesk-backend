// <auto-generated />
using System;
using Common.Infrastructure.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Common.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240525023636_AddQRCodeInRooms")]
    partial class AddQRCodeInRooms
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Common.Domain.Chats.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid")
                        .HasColumnName("ticket_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.HasIndex("Id", "IsDeleted")
                        .IsUnique();

                    b.ToTable("chat_messages", "dbo");
                });

            modelBuilder.Entity("Common.Domain.Rooms.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<byte[]>("QrCode")
                        .HasColumnType("bytea")
                        .HasColumnName("qr_code");

                    b.HasKey("Id");

                    b.HasIndex("Id", "IsDeleted")
                        .IsUnique();

                    b.ToTable("rooms", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9dc044e0-c191-4a2c-a2b7-57eb3f6ca23f"),
                            CreatedAt = new DateTime(2024, 5, 25, 2, 36, 36, 412, DateTimeKind.Utc).AddTicks(8369),
                            Description = "Sala de Aula - Física Avançada",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 5, 25, 2, 36, 36, 412, DateTimeKind.Utc).AddTicks(8369),
                            Name = "A1"
                        },
                        new
                        {
                            Id = new Guid("fe22f544-2160-4e9e-9a80-68c2a8604877"),
                            CreatedAt = new DateTime(2024, 5, 25, 2, 36, 36, 412, DateTimeKind.Utc).AddTicks(8374),
                            Description = "Laboratório de Química Orgânica",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 5, 25, 2, 36, 36, 412, DateTimeKind.Utc).AddTicks(8374),
                            Name = "A2"
                        },
                        new
                        {
                            Id = new Guid("85db8813-a85f-4649-af21-635e434794bb"),
                            CreatedAt = new DateTime(2024, 5, 25, 2, 36, 36, 412, DateTimeKind.Utc).AddTicks(8388),
                            Description = "Sala de Conferências - Ciências Sociais",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 5, 25, 2, 36, 36, 412, DateTimeKind.Utc).AddTicks(8388),
                            Name = "B1"
                        },
                        new
                        {
                            Id = new Guid("6eb98a68-9ad7-42df-ae8a-bb8594aa69fc"),
                            CreatedAt = new DateTime(2024, 5, 25, 2, 36, 36, 412, DateTimeKind.Utc).AddTicks(8391),
                            Description = "Sala de Estudo em Grupo - Matemática",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 5, 25, 2, 36, 36, 412, DateTimeKind.Utc).AddTicks(8391),
                            Name = "B2"
                        },
                        new
                        {
                            Id = new Guid("07f1493c-e98b-4f4f-a2b5-a6c68fb14e07"),
                            CreatedAt = new DateTime(2024, 5, 25, 2, 36, 36, 412, DateTimeKind.Utc).AddTicks(8394),
                            Description = "Auditório - Palestras de História da Arte",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 5, 25, 2, 36, 36, 412, DateTimeKind.Utc).AddTicks(8394),
                            Name = "C1"
                        },
                        new
                        {
                            Id = new Guid("9e9c5f20-7018-4c72-832c-961691f6f367"),
                            CreatedAt = new DateTime(2024, 5, 25, 2, 36, 36, 412, DateTimeKind.Utc).AddTicks(8396),
                            Description = "Sala de Projeção - Filmes de Literatura",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 5, 25, 2, 36, 36, 412, DateTimeKind.Utc).AddTicks(8396),
                            Name = "C2"
                        },
                        new
                        {
                            Id = new Guid("6a0d0881-06ef-49de-909e-572818b21c38"),
                            CreatedAt = new DateTime(2024, 5, 25, 2, 36, 36, 412, DateTimeKind.Utc).AddTicks(8398),
                            Description = "Sala de Seminários - Engenharia Civil",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 5, 25, 2, 36, 36, 412, DateTimeKind.Utc).AddTicks(8398),
                            Name = "D1"
                        },
                        new
                        {
                            Id = new Guid("eb025dab-52fa-4e60-939d-21408afc172c"),
                            CreatedAt = new DateTime(2024, 5, 25, 2, 36, 36, 412, DateTimeKind.Utc).AddTicks(8401),
                            Description = "Laboratório de Informática - Desenvolvimento de Software",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 5, 25, 2, 36, 36, 412, DateTimeKind.Utc).AddTicks(8401),
                            Name = "D2"
                        },
                        new
                        {
                            Id = new Guid("b8f60cef-2bed-49db-a91c-158dad34fad7"),
                            CreatedAt = new DateTime(2024, 5, 25, 2, 36, 36, 412, DateTimeKind.Utc).AddTicks(8403),
                            Description = "Biblioteca - Estudos de Filosofia",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 5, 25, 2, 36, 36, 412, DateTimeKind.Utc).AddTicks(8403),
                            Name = "E1"
                        },
                        new
                        {
                            Id = new Guid("0ea275ed-d6cd-4726-92ab-78248c01fa43"),
                            CreatedAt = new DateTime(2024, 5, 25, 2, 36, 36, 412, DateTimeKind.Utc).AddTicks(8406),
                            Description = "Sala de Reuniões - Administração de Empresas",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 5, 25, 2, 36, 36, 412, DateTimeKind.Utc).AddTicks(8406),
                            Name = "E2"
                        });
                });

            modelBuilder.Entity("Common.Domain.TicketImages.TicketImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid")
                        .HasColumnName("ticket_id");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("Id", "IsDeleted")
                        .IsUnique();

                    b.ToTable("ticket_images", "dbo");
                });

            modelBuilder.Entity("Common.Domain.Tickets.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid")
                        .HasColumnName("room_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid?>("SupportUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("support_user_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("SupportUserId");

                    b.HasIndex("UserId");

                    b.HasIndex("Id", "IsDeleted")
                        .IsUnique();

                    b.ToTable("tickets", "dbo");
                });

            modelBuilder.Entity("Common.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("UserType")
                        .HasColumnType("integer")
                        .HasColumnName("userType");

                    b.HasKey("Id");

                    b.HasIndex("Id", "IsDeleted")
                        .IsUnique();

                    b.ToTable("users", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1611669-2928-480a-bd97-2bec86f7773d"),
                            CreatedAt = new DateTime(2024, 5, 25, 2, 36, 36, 412, DateTimeKind.Utc).AddTicks(9076),
                            Email = "admin@gmail.com.br",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 5, 25, 2, 36, 36, 412, DateTimeKind.Utc).AddTicks(9076),
                            Name = "admin",
                            Password = "admin123",
                            UserType = 2
                        });
                });

            modelBuilder.Entity("Common.Domain.Chats.Chat", b =>
                {
                    b.HasOne("Common.Domain.Tickets.Ticket", "Ticket")
                        .WithMany("Chats")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Common.Domain.Users.User", "User")
                        .WithMany("Chats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Common.Domain.TicketImages.TicketImage", b =>
                {
                    b.HasOne("Common.Domain.Tickets.Ticket", "Ticket")
                        .WithMany("TicketImages")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Common.Domain.Tickets.Ticket", b =>
                {
                    b.HasOne("Common.Domain.Rooms.Room", "Room")
                        .WithMany("Tickets")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Domain.Users.User", "SupportUser")
                        .WithMany("UserSupportTickets")
                        .HasForeignKey("SupportUserId");

                    b.HasOne("Common.Domain.Users.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("SupportUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Common.Domain.Rooms.Room", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Common.Domain.Tickets.Ticket", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("TicketImages");
                });

            modelBuilder.Entity("Common.Domain.Users.User", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Tickets");

                    b.Navigation("UserSupportTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
