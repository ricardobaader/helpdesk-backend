// <auto-generated />
using System;
using Common.Infrastructure.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Common.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Common.Domain.Chats.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid")
                        .HasColumnName("ticket_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.HasIndex("Id", "IsDeleted")
                        .IsUnique();

                    b.ToTable("chat_messages", (string)null);
                });

            modelBuilder.Entity("Common.Domain.Rooms.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<byte[]>("QrCode")
                        .HasColumnType("bytea")
                        .HasColumnName("qr_code");

                    b.HasKey("Id");

                    b.HasIndex("Id", "IsDeleted")
                        .IsUnique();

                    b.ToTable("rooms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d042c31a-5454-4bef-890c-aa06db7333cc"),
                            CreatedAt = new DateTime(2024, 6, 21, 0, 2, 18, 68, DateTimeKind.Utc).AddTicks(7678),
                            Description = "Sala de Aula - Física Avançada",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 6, 21, 0, 2, 18, 68, DateTimeKind.Utc).AddTicks(7678),
                            Name = "A1"
                        },
                        new
                        {
                            Id = new Guid("e42bae84-0ef7-4888-8984-5761fd5a2076"),
                            CreatedAt = new DateTime(2024, 6, 21, 0, 2, 18, 68, DateTimeKind.Utc).AddTicks(7682),
                            Description = "Laboratório de Química Orgânica",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 6, 21, 0, 2, 18, 68, DateTimeKind.Utc).AddTicks(7682),
                            Name = "A2"
                        },
                        new
                        {
                            Id = new Guid("e1f047ea-a10e-4622-8927-752ab8f4874d"),
                            CreatedAt = new DateTime(2024, 6, 21, 0, 2, 18, 68, DateTimeKind.Utc).AddTicks(7685),
                            Description = "Sala de Conferências - Ciências Sociais",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 6, 21, 0, 2, 18, 68, DateTimeKind.Utc).AddTicks(7685),
                            Name = "B1"
                        },
                        new
                        {
                            Id = new Guid("5d1164ca-3b93-4b4c-9281-2e8868fbe151"),
                            CreatedAt = new DateTime(2024, 6, 21, 0, 2, 18, 68, DateTimeKind.Utc).AddTicks(7687),
                            Description = "Sala de Estudo em Grupo - Matemática",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 6, 21, 0, 2, 18, 68, DateTimeKind.Utc).AddTicks(7687),
                            Name = "B2"
                        },
                        new
                        {
                            Id = new Guid("9d88d8e3-f41b-4dbe-a4e3-58a67bff9771"),
                            CreatedAt = new DateTime(2024, 6, 21, 0, 2, 18, 68, DateTimeKind.Utc).AddTicks(7689),
                            Description = "Auditório - Palestras de História da Arte",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 6, 21, 0, 2, 18, 68, DateTimeKind.Utc).AddTicks(7689),
                            Name = "C1"
                        },
                        new
                        {
                            Id = new Guid("e270a034-caea-492c-a3f5-d01c74e8ca21"),
                            CreatedAt = new DateTime(2024, 6, 21, 0, 2, 18, 68, DateTimeKind.Utc).AddTicks(7692),
                            Description = "Sala de Projeção - Filmes de Literatura",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 6, 21, 0, 2, 18, 68, DateTimeKind.Utc).AddTicks(7692),
                            Name = "C2"
                        },
                        new
                        {
                            Id = new Guid("ea78e078-1e9f-433c-9977-567ce3c4c240"),
                            CreatedAt = new DateTime(2024, 6, 21, 0, 2, 18, 68, DateTimeKind.Utc).AddTicks(7694),
                            Description = "Sala de Seminários - Engenharia Civil",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 6, 21, 0, 2, 18, 68, DateTimeKind.Utc).AddTicks(7694),
                            Name = "D1"
                        },
                        new
                        {
                            Id = new Guid("dee09be6-a2f8-4ac1-a68c-15f0e5b1ede9"),
                            CreatedAt = new DateTime(2024, 6, 21, 0, 2, 18, 68, DateTimeKind.Utc).AddTicks(7696),
                            Description = "Laboratório de Informática - Desenvolvimento de Software",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 6, 21, 0, 2, 18, 68, DateTimeKind.Utc).AddTicks(7696),
                            Name = "D2"
                        },
                        new
                        {
                            Id = new Guid("341d68bf-ebfb-4e3c-8749-e716827f48bd"),
                            CreatedAt = new DateTime(2024, 6, 21, 0, 2, 18, 68, DateTimeKind.Utc).AddTicks(7700),
                            Description = "Biblioteca - Estudos de Filosofia",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 6, 21, 0, 2, 18, 68, DateTimeKind.Utc).AddTicks(7700),
                            Name = "E1"
                        },
                        new
                        {
                            Id = new Guid("5551bdbf-9c2e-495c-97c6-c2a68ebf3b1a"),
                            CreatedAt = new DateTime(2024, 6, 21, 0, 2, 18, 68, DateTimeKind.Utc).AddTicks(7702),
                            Description = "Sala de Reuniões - Administração de Empresas",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 6, 21, 0, 2, 18, 68, DateTimeKind.Utc).AddTicks(7702),
                            Name = "E2"
                        });
                });

            modelBuilder.Entity("Common.Domain.TicketImages.TicketImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid")
                        .HasColumnName("ticket_id");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("Id", "IsDeleted")
                        .IsUnique();

                    b.ToTable("ticket_images", (string)null);
                });

            modelBuilder.Entity("Common.Domain.Tickets.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Number"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Number"), 100L, null, null, null, null, null);

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid")
                        .HasColumnName("room_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid?>("SupportUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("support_user_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("SupportUserId");

                    b.HasIndex("UserId");

                    b.HasIndex("Id", "IsDeleted")
                        .IsUnique();

                    b.ToTable("tickets", (string)null);
                });

            modelBuilder.Entity("Common.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("UserType")
                        .HasColumnType("integer")
                        .HasColumnName("userType");

                    b.HasKey("Id");

                    b.HasIndex("Id", "IsDeleted")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Common.Domain.Chats.Chat", b =>
                {
                    b.HasOne("Common.Domain.Tickets.Ticket", "Ticket")
                        .WithMany("Chats")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Common.Domain.Users.User", "User")
                        .WithMany("Chats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Common.Domain.TicketImages.TicketImage", b =>
                {
                    b.HasOne("Common.Domain.Tickets.Ticket", "Ticket")
                        .WithMany("TicketImages")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Common.Domain.Tickets.Ticket", b =>
                {
                    b.HasOne("Common.Domain.Rooms.Room", "Room")
                        .WithMany("Tickets")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Domain.Users.User", "SupportUser")
                        .WithMany("UserSupportTickets")
                        .HasForeignKey("SupportUserId");

                    b.HasOne("Common.Domain.Users.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("SupportUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Common.Domain.Rooms.Room", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Common.Domain.Tickets.Ticket", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("TicketImages");
                });

            modelBuilder.Entity("Common.Domain.Users.User", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Tickets");

                    b.Navigation("UserSupportTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
