// <auto-generated />
using System;
using Common.Infrastructure.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Common.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240426193727_UpdateBaseEntity")]
    partial class UpdateBaseEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Common.Domain.Rooms.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Id", "IsDeleted")
                        .IsUnique();

                    b.ToTable("rooms", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1f49b0c-7859-4262-a5ae-03b9bc7fc5ca"),
                            CreatedAt = new DateTime(2024, 4, 26, 19, 37, 27, 337, DateTimeKind.Utc).AddTicks(7218),
                            Description = "Sala de Aula - Física Avançada",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 4, 26, 19, 37, 27, 337, DateTimeKind.Utc).AddTicks(7218),
                            Name = "A1"
                        },
                        new
                        {
                            Id = new Guid("e815dec8-5406-40da-94b6-99c98d8d21f2"),
                            CreatedAt = new DateTime(2024, 4, 26, 19, 37, 27, 337, DateTimeKind.Utc).AddTicks(7225),
                            Description = "Laboratório de Química Orgânica",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 4, 26, 19, 37, 27, 337, DateTimeKind.Utc).AddTicks(7225),
                            Name = "A2"
                        },
                        new
                        {
                            Id = new Guid("27290885-d7c6-400b-a9c6-980778d6834d"),
                            CreatedAt = new DateTime(2024, 4, 26, 19, 37, 27, 337, DateTimeKind.Utc).AddTicks(7229),
                            Description = "Sala de Conferências - Ciências Sociais",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 4, 26, 19, 37, 27, 337, DateTimeKind.Utc).AddTicks(7229),
                            Name = "B1"
                        },
                        new
                        {
                            Id = new Guid("d022720b-d0bb-433d-bc63-945939ee2bcc"),
                            CreatedAt = new DateTime(2024, 4, 26, 19, 37, 27, 337, DateTimeKind.Utc).AddTicks(7233),
                            Description = "Sala de Estudo em Grupo - Matemática",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 4, 26, 19, 37, 27, 337, DateTimeKind.Utc).AddTicks(7233),
                            Name = "B2"
                        },
                        new
                        {
                            Id = new Guid("ad64b43e-3db1-4e7e-a409-b3f30d34bdee"),
                            CreatedAt = new DateTime(2024, 4, 26, 19, 37, 27, 337, DateTimeKind.Utc).AddTicks(7235),
                            Description = "Auditório - Palestras de História da Arte",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 4, 26, 19, 37, 27, 337, DateTimeKind.Utc).AddTicks(7235),
                            Name = "C1"
                        },
                        new
                        {
                            Id = new Guid("328dc2e2-a7e7-46cd-92f5-8c0e187def3a"),
                            CreatedAt = new DateTime(2024, 4, 26, 19, 37, 27, 337, DateTimeKind.Utc).AddTicks(7247),
                            Description = "Sala de Projeção - Filmes de Literatura",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 4, 26, 19, 37, 27, 337, DateTimeKind.Utc).AddTicks(7247),
                            Name = "C2"
                        },
                        new
                        {
                            Id = new Guid("9edb91b9-cbf8-40f7-b993-06deb1d51f01"),
                            CreatedAt = new DateTime(2024, 4, 26, 19, 37, 27, 337, DateTimeKind.Utc).AddTicks(7250),
                            Description = "Sala de Seminários - Engenharia Civil",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 4, 26, 19, 37, 27, 337, DateTimeKind.Utc).AddTicks(7250),
                            Name = "D1"
                        },
                        new
                        {
                            Id = new Guid("5ef6fdd4-4c85-4c90-8771-0f2857493c8b"),
                            CreatedAt = new DateTime(2024, 4, 26, 19, 37, 27, 337, DateTimeKind.Utc).AddTicks(7252),
                            Description = "Laboratório de Informática - Desenvolvimento de Software",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 4, 26, 19, 37, 27, 337, DateTimeKind.Utc).AddTicks(7252),
                            Name = "D2"
                        },
                        new
                        {
                            Id = new Guid("a81ebf27-bdfc-450d-ae85-5130dee66946"),
                            CreatedAt = new DateTime(2024, 4, 26, 19, 37, 27, 337, DateTimeKind.Utc).AddTicks(7255),
                            Description = "Biblioteca - Estudos de Filosofia",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 4, 26, 19, 37, 27, 337, DateTimeKind.Utc).AddTicks(7255),
                            Name = "E1"
                        },
                        new
                        {
                            Id = new Guid("78ec12e6-91f2-47f7-bd33-3c47b66651d3"),
                            CreatedAt = new DateTime(2024, 4, 26, 19, 37, 27, 337, DateTimeKind.Utc).AddTicks(7258),
                            Description = "Sala de Reuniões - Administração de Empresas",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 4, 26, 19, 37, 27, 337, DateTimeKind.Utc).AddTicks(7258),
                            Name = "E2"
                        });
                });

            modelBuilder.Entity("Common.Domain.TicketImages.TicketImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_updated_at");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ticket_id");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("Id", "IsDeleted")
                        .IsUnique();

                    b.ToTable("ticket_images", "dbo");
                });

            modelBuilder.Entity("Common.Domain.Tickets.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_updated_at");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("room_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid?>("SupportUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("support_user_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("SupportUserId");

                    b.HasIndex("UserId");

                    b.HasIndex("Id", "IsDeleted")
                        .IsUnique();

                    b.ToTable("tickets", "dbo");
                });

            modelBuilder.Entity("Common.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<int>("UserType")
                        .HasColumnType("int")
                        .HasColumnName("userType");

                    b.HasKey("Id");

                    b.HasIndex("Id", "IsDeleted")
                        .IsUnique();

                    b.ToTable("users", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3f7e240-b775-49f1-a697-1bd206726af4"),
                            CreatedAt = new DateTime(2024, 4, 26, 19, 37, 27, 337, DateTimeKind.Utc).AddTicks(8249),
                            Email = "admin@gmail.com.br",
                            IsDeleted = false,
                            LastUpdatedAt = new DateTime(2024, 4, 26, 19, 37, 27, 337, DateTimeKind.Utc).AddTicks(8249),
                            Name = "admin",
                            Password = "admin123",
                            UserType = 2
                        });
                });

            modelBuilder.Entity("Common.Domain.TicketImages.TicketImage", b =>
                {
                    b.HasOne("Common.Domain.Tickets.Ticket", "Ticket")
                        .WithMany("TicketImages")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Common.Domain.Tickets.Ticket", b =>
                {
                    b.HasOne("Common.Domain.Rooms.Room", "Room")
                        .WithMany("Tickets")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Domain.Users.User", "SupportUser")
                        .WithMany("UserSupportTickets")
                        .HasForeignKey("SupportUserId");

                    b.HasOne("Common.Domain.Users.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("SupportUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Common.Domain.Rooms.Room", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Common.Domain.Tickets.Ticket", b =>
                {
                    b.Navigation("TicketImages");
                });

            modelBuilder.Entity("Common.Domain.Users.User", b =>
                {
                    b.Navigation("Tickets");

                    b.Navigation("UserSupportTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
